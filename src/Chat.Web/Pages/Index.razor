@page "/"
@using AutoMapper
@using Chat.Data.Entities
@using Chat.Data.Models
@using Chat.Data.Repositories
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject IChatMessageRepository ChatMessageRepo
@inject IMapper Mapper

<PageTitle>Chat</PageTitle>

<EditForm Model="@_messageInput" OnValidSubmit="@OnSendMessage">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label>Name:</label>
    <InputText id="name" @bind-Value="_messageInput.Username" />
    <label>Message:</label>
    <InputText id="message" @bind-Value="_messageInput.Message" />
    <button type="submit" class="btn btn-primary" disabled="@IsDisconnected">Send</button>
</EditForm>

<button class="btn btn-primary" onclick="@OnDeleteAll">Delete All</button>

@foreach (var message in _messages)
{
    <p>@message</p>
}

@code {
    private bool IsDisconnected => _hubConnection?.State is not HubConnectionState.Connected;
    private HubConnection? _hubConnection;
    private List<ChatMessage> _messages = new();
    private readonly ChatMessage _messageInput = new();

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        _messages = Mapper.Map<IEnumerable<ChatMessageEntity>, List<ChatMessage>>(await ChatMessageRepo.Get());
        
        // TODO: to use HTTPS when running in container, mount the HTTPS cert onto webapp container and update the URL here
        _hubConnection = new HubConnectionBuilder().WithUrl("http://chat/chat").WithAutomaticReconnect().Build();
        _hubConnection.On<ChatMessage>("ReceiveMessage", message =>
        {
            _messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private async Task OnDeleteAll()
    {
        _messages.Clear();
        var messageEntities = await ChatMessageRepo.Get();
        await ChatMessageRepo.Delete(messageEntities.ToList());
        await ChatMessageRepo.Save();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSendMessage()
    {
        if (_hubConnection is not null)
        {
            _messageInput.Reset();
            await _hubConnection.SendAsync("SendMessage", _messageInput);
            await ChatMessageRepo.Add(Mapper.Map<ChatMessage, ChatMessageEntity>(_messageInput));
            await ChatMessageRepo.Save();
            
            _messageInput.Message = string.Empty;
        }
    }
}
